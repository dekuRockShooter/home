Install Kafka and ZooKeeper [1]:
    $ wget http://apache.claz.org/kafka/1.1.0/kafka_2.11-1.1.0.tgz
    $ tar -xf kafka_2.11-1.1.0.tgz
    $ cd kafka_2.11-1.1.0

    Start ZooKeeper and Kafka.  Output should be a list of log events.
    $ ./bin/zookeeper-server-start.sh config/zookeeper.properties
    $ ./bin/kafka-server-start.sh config/server.properties

Create a topic [1]:
    $ ./bin/kafka-topics.sh --create --zookeeper localhost:2181\
        --replication-factor 1 --partitions 1 --topic test
    # Display a list of all topics.
    # ./bin/kafka-topics.sh --list --zookeeper localhost:2181

Send and receive messages about a topic [1]:
    Execute the following commands in different terminals.

    # Send messages from stdin.
    $ ./bin/kafka-console-producer.sh --broker-list localhost:9092\
        --topic test

    # Receive messages from stdin.  The producer needs to be running.
    $ ./bin/kafka-console-consumer.sh --bootsrap-server localhost:9092\
        --topic test --from-beginning

Set up multiple brokers [1]:
    $ cp config/server.properties config/server-1.properties
    $ cp config/server.properties config/server-2.properties

    Open vim and make the following changes.
    broker.id=1
    listeners=PLAINTEXT://:9093
    log.dir=/tmp/kafka-logs-1

    broker.id=2
    listeners=PLAINTEXT://:9094
    log.dir=/tmp/kafka-logs-2

    Start the brokers.
    $ ./bin/kafka-server-start.sh config/server-1.properties
    $ ./bin/kafka-server-start.sh config/server-2.properties

    Create a replicated topic.
    $ ./bin/kafka-topics.sh --create --zookeeper localhost:2181\
        --replication-factor 3 --partitions 1 --topic replicated_test

    Get information about a topic.  The first line is a summary of the
    partitions.  The following lines display info about each partition.
    $ ./bin/kafka-topics.sh --describe --zookeeper localhost:2181\
        --topic replicated_test

Import and export data [1]:

    Start a connector as a standalone process.  The first config specifies
    the process' behavior, the others specify a connector to create.
    $ cp ../test.txt ./
    $ ./bin/connect-standalone.sh config/connect-standalone.properties\
        config/connect-file-source.properties\
        config/connect-file-sink.properties

    $ cat test.sink.txt
    $ tail -f test.sink.txt
    $ echo 10 20 30 >> test.txt


References:
[1] https://kafka.apache.org/quickstart
